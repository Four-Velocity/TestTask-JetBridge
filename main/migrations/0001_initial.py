# Generated by Django 3.0.6 on 2020-05-27 22:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Other')], default=3, verbose_name='gender')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('avatar', models.ImageField(blank=True, upload_to='tmp/avatars', verbose_name='photo')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('skill_1', models.CharField(blank=True, max_length=30, verbose_name='first skill')),
                ('level_1', models.IntegerField(blank=True, choices=[(1, 'Beginner'), (2, 'Middle'), (3, 'Boss'), (4, 'The Best One')], default=1, verbose_name='first skill level')),
                ('skill_2', models.CharField(blank=True, max_length=30, verbose_name='second skill')),
                ('level_2', models.IntegerField(blank=True, choices=[(1, 'Beginner'), (2, 'Middle'), (3, 'Boss'), (4, 'The Best One')], default=1, verbose_name='second skill level')),
                ('skill_3', models.CharField(blank=True, max_length=30, verbose_name='third skill')),
                ('level_3', models.IntegerField(blank=True, choices=[(1, 'Beginner'), (2, 'Middle'), (3, 'Boss'), (4, 'The Best One')], default=1, verbose_name='third skill level')),
                ('skill_4', models.CharField(blank=True, max_length=30, verbose_name='fourth skill')),
                ('level_4', models.IntegerField(blank=True, choices=[(1, 'Beginner'), (2, 'Middle'), (3, 'Boss'), (4, 'The Best One')], default=1, verbose_name='fourth skill level')),
                ('plate_img_1', models.ImageField(blank=True, upload_to='tmp/plates', verbose_name='first image')),
                ('plate_text_1', models.TextField(blank=True, max_length=200, verbose_name='first text')),
                ('plate_img_2', models.ImageField(blank=True, upload_to='tmp/plates', verbose_name='second image')),
                ('plate_text_2', models.TextField(blank=True, max_length=200, verbose_name='second text')),
                ('plate_img_3', models.ImageField(blank=True, upload_to='tmp/plates', verbose_name='third image')),
                ('plate_text_3', models.TextField(blank=True, max_length=200, verbose_name='third text')),
                ('plate_img_4', models.ImageField(blank=True, upload_to='tmp/plates', verbose_name='fourth image')),
                ('plate_text_4', models.TextField(blank=True, max_length=200, verbose_name='fourth text')),
                ('template', models.IntegerField(choices=[(1, 'Square'), (2, 'Bricks'), (3, 'Ladder'), (4, 'Journal')], default=1, verbose_name='profile template')),
                ('finished', models.BooleanField(default=False, verbose_name='registration finished')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=6, verbose_name='encoded numeric part')),
                ('sort', models.IntegerField(choices=[(1, 'Personal'), (2, 'Enterprise'), (3, 'Self-Hosted')], verbose_name='code type')),
                ('code', models.CharField(max_length=8, verbose_name='invitation code')),
                ('url', models.CharField(max_length=150, verbose_name='invitation link')),
                ('qr', models.FileField(upload_to='qr_codes', verbose_name='invitation qr code')),
                ('joined', models.IntegerField(default=0, verbose_name='number of invited people')),
                ('owner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invite_code', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='invitation_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invited_list', to='main.Code', verbose_name='joined using code'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
